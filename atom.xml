<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HORIZON</title>
  
  
  <link href="https://vincent0700.com/atom.xml" rel="self"/>
  
  <link href="https://vincent0700.com/"/>
  <updated>2021-12-15T14:15:29.958Z</updated>
  <id>https://vincent0700.com/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Three.js 骨骼动画原理</title>
    <link href="https://vincent0700.com/2021/12/15/20211215_ThreeJs%E9%AA%A8%E9%AA%BC%E5%8A%A8%E7%94%BB%E5%8E%9F%E7%90%86/"/>
    <id>https://vincent0700.com/2021/12/15/20211215_ThreeJs%E9%AA%A8%E9%AA%BC%E5%8A%A8%E7%94%BB%E5%8E%9F%E7%90%86/</id>
    <published>2021-12-15T15:00:00.000Z</published>
    <updated>2021-12-15T14:15:29.958Z</updated>
    
    <content type="html"><![CDATA[<p>模型动画分两种，顶点动画和骨骼动画，上图行走的史蒂夫是我用 three.js 写的一个骨骼动画的 Demo</p><span id="more"></span><h2 id="顶点动画-Vertex-Animation"><a href="#顶点动画-Vertex-Animation" class="headerlink" title="顶点动画 (Vertex Animation)"></a>顶点动画 (Vertex Animation)</h2><p>相对于骨骼动画，顶点动画的概念可能更好理解一些。我们对模型的网格数据逐帧、逐顶点进行矩阵变换（平移、旋转、缩放），记录下每帧的变换操作；或是利用插值函数记录下关键帧，这就是顶点动画了。理论上顶点动画完全可以实现任意的模型动画，然而这是一项数据密集型的技术，数据太过冗余，实际生产中很少用到。</p><h2 id="骨骼动画-Skeleton-Animation"><a href="#骨骼动画-Skeleton-Animation" class="headerlink" title="骨骼动画 (Skeleton Animation)"></a>骨骼动画 (Skeleton Animation)</h2><p>骨骼拉伸带动肌肉，肌肉再带动皮肤。我们只需记录骨骼的位置就能得出皮肤网格的顶点位置。</p><p><img src="/static/posts/20211215_ThreeJs%E9%AA%A8%E9%AA%BC%E5%8A%A8%E7%94%BB%E5%8E%9F%E7%90%86/pic1.png"></p><h3 id="骨骼-Bone"><a href="#骨骼-Bone" class="headerlink" title="骨骼 Bone"></a>骨骼 Bone</h3><p>骨骼有3个基础元素（见右上图）：</p><ol><li>头部 Root</li><li>主体 Body</li><li>尾部 Tip</li></ol><h3 id="蒙皮-Skinned"><a href="#蒙皮-Skinned" class="headerlink" title="蒙皮 Skinned"></a>蒙皮 Skinned</h3><p>蒙皮就是把骨骼和模型结合起来的过程，蒙皮网格叫做 Skinned Mesh。在一些建模软件中，支持一键蒙皮（根据网格顶点到骨骼的距离自动赋权重）。</p><p><img src="/static/posts/20211215_ThreeJs%E9%AA%A8%E9%AA%BC%E5%8A%A8%E7%94%BB%E5%8E%9F%E7%90%86/pic2.png"></p><h3 id="权重-Weight"><a href="#权重-Weight" class="headerlink" title="权重 Weight"></a>权重 Weight</h3><p>蒙皮网格中还包含了 顶点受哪些骨骼影响 以及这些 骨骼影响该顶点的权重。听起来有点绕，用公式表示蒙皮网格顶点的坐标大概像这样：<br>$$P_i = \sum_j  W_j \cdot ( \mathbf{M_j} \times \vec{V_i} )$$<br>其中 i 是网格顶点的下标，j 表示骨骼的下标，$V_i$ 表示网格的模型坐标，$P_i$ 表示变换后网格的世界坐标，$W_j$ 表示第 j 个骨骼对网格顶点的影响，$\mathbf M_j$ 是一个 4x4 矩阵，表示骨骼变换本身（平移、旋转、缩放）。</p><h2 id="three-js-对骨骼动画的实现"><a href="#three-js-对骨骼动画的实现" class="headerlink" title="three.js 对骨骼动画的实现"></a>three.js 对骨骼动画的实现</h2><p>我们以最常用的 <code>MeshStandardMaterial</code> 材质为例，梳理一下 three.js 着色部分的源码</p><h3 id="着色器入口-ShaderLib-js"><a href="#着色器入口-ShaderLib-js" class="headerlink" title="着色器入口 ShaderLib.js"></a>着色器入口 ShaderLib.js</h3><p>首先找到材质 shader 的入口 <a href="https://github.com/mrdoob/three.js/blob/dev/src/renderers/shaders/ShaderLib.js">src/renderers/shaders/ShaderLib.js</a></p><figure class="highlight js"><figcaption><span>./src/renderers/shaders/ShaderLib.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ShaderLib = &#123;</span><br><span class="line">  basic:   &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">  lambert: &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">  phong:   &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">  standard: &#123;</span><br><span class="line">    uniforms: mergeUniforms([</span><br><span class="line">      UniformsLib.common,</span><br><span class="line">      UniformsLib.envmap,</span><br><span class="line">      UniformsLib.aomap,</span><br><span class="line">      UniformsLib.lightmap,</span><br><span class="line">      UniformsLib.emissivemap,</span><br><span class="line">      UniformsLib.bumpmap,</span><br><span class="line">      UniformsLib.normalmap,</span><br><span class="line">      UniformsLib.displacementmap,</span><br><span class="line">      UniformsLib.roughnessmap,</span><br><span class="line">      UniformsLib.metalnessmap,</span><br><span class="line">      UniformsLib.fog,</span><br><span class="line">      UniformsLib.lights,</span><br><span class="line">      &#123;</span><br><span class="line">        emissive:  &#123; <span class="attr">value</span>: <span class="keyword">new</span> Color( <span class="number">0x000000</span> ) &#125;,</span><br><span class="line">        roughness: &#123; <span class="attr">value</span>: <span class="number">1.0</span> &#125;,</span><br><span class="line">        metalness: &#123; <span class="attr">value</span>: <span class="number">0.0</span> &#125;,</span><br><span class="line">        envMapIntensity: &#123; <span class="attr">value</span>: <span class="number">1</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]),</span><br><span class="line">    vertexShader: ShaderChunk.meshphysical_vert,</span><br><span class="line">    fragmentShader: ShaderChunk.meshphysical_frag</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传了一堆 uniforms 进来，以及着色器的入口，骨骼主要是在顶点着色阶段作用。</p><h3 id="理解源码"><a href="#理解源码" class="headerlink" title="理解源码"></a>理解源码</h3><p>我们进入 <code>meshphysical_vert</code> (meshphysical.glsl) 看看，我省略了大部分无关的引入。<a href="https://github.com/mrdoob/three.js/blob/dev/src/renderers/shaders/ShaderLib/meshphysical.glsl.js">&lt;完整源码&gt;</a></p><figure class="highlight glsl"><figcaption><span>./src/renderers/shaders/ShaderLib/meshphysical.glsl.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ~~ #include ... ~~ */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#include &lt;skinning_pars_vertex&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main() &#123;</span><br><span class="line">  <span class="comment">/* ~~ #include ... ~~ */</span></span><br><span class="line">    </span><br><span class="line">  <span class="meta">#include &lt;skinbase_vertex&gt;</span></span><br><span class="line">  <span class="meta">#include &lt;begin_vertex&gt;</span></span><br><span class="line">  <span class="meta">#include &lt;skinbase_vertex&gt;</span></span><br><span class="line">  <span class="meta">#include &lt;skinning_vertex&gt;</span></span><br><span class="line">  <span class="meta">#include &lt;project_vertex&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* ~~ #include ... ~~ */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你读过 three.js 着色器源码的话就能发现 three 的着色器充斥着大量的 #include，非常不方便阅读，我简单整理代码，将 #include 的代码合并到一个文件中：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ~~ #include &lt;skinning_pars_vertex&gt; ~~ */</span></span><br><span class="line"><span class="meta">#ifdef USE_SKINNING</span></span><br><span class="line">  <span class="keyword">uniform</span> <span class="type">mat4</span> bindMatrix;</span><br><span class="line">  <span class="keyword">uniform</span> <span class="type">mat4</span> bindMatrixInverse;</span><br><span class="line">  <span class="meta">#ifdef BONE_TEXTURE</span></span><br><span class="line">    <span class="keyword">uniform</span> <span class="keyword">highp</span> <span class="type">sampler2D</span> boneTexture;</span><br><span class="line">    <span class="keyword">uniform</span> <span class="type">int</span> boneTextureSize;</span><br><span class="line">    <span class="type">mat4</span> getBoneMatrix( <span class="keyword">const</span> <span class="keyword">in</span> <span class="type">float</span> i ) &#123;</span><br><span class="line">      <span class="type">float</span> j = i * <span class="number">4.0</span>;</span><br><span class="line">      <span class="type">float</span> x = <span class="built_in">mod</span>( j, <span class="type">float</span>( boneTextureSize ) );</span><br><span class="line">      <span class="type">float</span> y = <span class="built_in">floor</span>( j / <span class="type">float</span>( boneTextureSize ) );</span><br><span class="line">      <span class="type">float</span> dx = <span class="number">1.0</span> / <span class="type">float</span>( boneTextureSize );</span><br><span class="line">      <span class="type">float</span> dy = <span class="number">1.0</span> / <span class="type">float</span>( boneTextureSize );</span><br><span class="line">      y = dy * ( y + <span class="number">0.5</span> );</span><br><span class="line">      <span class="type">vec4</span> v1 = <span class="built_in">texture2D</span>( boneTexture, <span class="type">vec2</span>( dx * ( x + <span class="number">0.5</span> ), y ) );</span><br><span class="line">      <span class="type">vec4</span> v2 = <span class="built_in">texture2D</span>( boneTexture, <span class="type">vec2</span>( dx * ( x + <span class="number">1.5</span> ), y ) );</span><br><span class="line">      <span class="type">vec4</span> v3 = <span class="built_in">texture2D</span>( boneTexture, <span class="type">vec2</span>( dx * ( x + <span class="number">2.5</span> ), y ) );</span><br><span class="line">      <span class="type">vec4</span> v4 = <span class="built_in">texture2D</span>( boneTexture, <span class="type">vec2</span>( dx * ( x + <span class="number">3.5</span> ), y ) );</span><br><span class="line">      <span class="type">mat4</span> bone = <span class="type">mat4</span>( v1, v2, v3, v4 );</span><br><span class="line">      <span class="keyword">return</span> bone;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="meta">#else</span></span><br><span class="line">    <span class="keyword">uniform</span> <span class="type">mat4</span> boneMatrices[ MAX_BONES ];</span><br><span class="line">    <span class="comment">// 获取骨骼变换矩阵</span></span><br><span class="line">    <span class="type">mat4</span> getBoneMatrix( <span class="keyword">const</span> <span class="keyword">in</span> <span class="type">float</span> i ) &#123;</span><br><span class="line">      <span class="type">mat4</span> bone = boneMatrices[ <span class="type">int</span>(i) ];</span><br><span class="line">      <span class="keyword">return</span> bone;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="meta">#endif</span></span><br><span class="line"><span class="meta">#endif</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main() &#123;</span><br><span class="line">  <span class="comment">/* ~~ #include &lt;begin_vertex&gt; ~~ */</span></span><br><span class="line">  <span class="comment">// 用模型空间坐标初始化 transformed 变量</span></span><br><span class="line">  <span class="type">vec3</span> transformed = <span class="type">vec3</span>(position);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* ~~ #include &lt;skinbase_vertex&gt; ~~ */</span></span><br><span class="line">  <span class="meta">#ifdef USE_SKINNING</span></span><br><span class="line">    <span class="type">mat4</span> boneMatX = getBoneMatrix( skinIndex.x );</span><br><span class="line">    <span class="type">mat4</span> boneMatY = getBoneMatrix( skinIndex.y );</span><br><span class="line">    <span class="type">mat4</span> boneMatZ = getBoneMatrix( skinIndex.z );</span><br><span class="line">    <span class="type">mat4</span> boneMatW = getBoneMatrix( skinIndex.w );</span><br><span class="line">  <span class="meta">#endif</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* ~~ #include &lt;skinning_vertex&gt; ~~ */</span></span><br><span class="line">  <span class="meta">#ifdef USE_SKINNING</span></span><br><span class="line">    <span class="comment">// 被控顶点通过 bindMatrix 变换到骨骼空间坐标</span></span><br><span class="line">    <span class="type">vec4</span> skinVertex = bindMatrix * <span class="type">vec4</span>( transformed, <span class="number">1.0</span> );</span><br><span class="line">    <span class="type">vec4</span> skinned = <span class="type">vec4</span>( <span class="number">0.0</span> );</span><br><span class="line">    <span class="comment">// 应用骨骼变换，一个顶点最多支持被 4 个骨骼控制</span></span><br><span class="line">    skinned += boneMatX * skinVertex * skinWeight.x;</span><br><span class="line">    skinned += boneMatY * skinVertex * skinWeight.y;</span><br><span class="line">    skinned += boneMatZ * skinVertex * skinWeight.z;</span><br><span class="line">    skinned += boneMatW * skinVertex * skinWeight.w;</span><br><span class="line">    <span class="comment">// 再通过 bindMatrix 的逆矩阵变换回模型空间坐标</span></span><br><span class="line">    transformed = ( bindMatrixInverse * skinned ).xyz;</span><br><span class="line">  <span class="meta">#endif</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* ~~ #include &lt;project_vertex&gt; ~~ */</span></span><br><span class="line">  <span class="comment">// 模型经过骨骼变换</span></span><br><span class="line">  <span class="type">vec4</span> mvPosition = <span class="type">vec4</span>( transformed, <span class="number">1.0</span> );</span><br><span class="line">  <span class="meta">#ifdef USE_INSTANCING</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这是 webgl2 实例化绘制的一个特性，可以缓存上次绘制的 uniforms,</span></span><br><span class="line"><span class="comment">     * 可以提高重复绘制相同物体的性能，可以先忽略</span></span><br><span class="line"><span class="comment">     * @see https://webgl2fundamentals.org/webgl/lessons/zh_cn/webgl-instanced-drawing.html</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    mvPosition = instanceMatrix * mvPosition;</span><br><span class="line">  <span class="meta">#endif</span></span><br><span class="line">  <span class="comment">// 乘以模型矩阵得到世界坐标</span></span><br><span class="line">  mvPosition = modelViewMatrix * mvPosition;</span><br><span class="line">  <span class="comment">// 乘以投影矩阵得到屏幕坐标，可以说 VertexShader 的目的主要就是得到 gl_Position</span></span><br><span class="line">  <span class="built_in">gl_Position</span> = projectionMatrix * mvPosition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最后总结下 three.js 顶点着色器的主要逻辑</p><ol><li>transformed = position (模型空间坐标)</li><li>skinVertex = bindMatrix * transformed (骨骼空间坐标)</li><li>skinned = boneMat * skinVertex * skinWeight (应用骨骼变换)</li><li>transformed = bindMatrixInverse * skinned (变回模型空间)</li><li>gl_Position = MVP * transformed (得到屏幕坐标)</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;模型动画分两种，顶点动画和骨骼动画，上图行走的史蒂夫是我用 three.js 写的一个骨骼动画的 Demo&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://vincent0700.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="Three.js" scheme="https://vincent0700.com/tags/Three-js/"/>
    
    <category term="图形学" scheme="https://vincent0700.com/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>柏林噪声算法解析</title>
    <link href="https://vincent0700.com/2021/10/19/20211019_%E6%9F%8F%E6%9E%97%E5%99%AA%E5%A3%B0%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90/"/>
    <id>https://vincent0700.com/2021/10/19/20211019_%E6%9F%8F%E6%9E%97%E5%99%AA%E5%A3%B0%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90/</id>
    <published>2021-10-19T15:00:00.000Z</published>
    <updated>2022-02-21T14:18:52.224Z</updated>
    
    <content type="html"><![CDATA[<p>柏林噪声（Perlin Noise）算法是 Ken Perlin 发明的一种自然噪声生成算法，并在图形学领域广泛使用。例如模拟火焰、云彩的纹理、生成随机地形图等。</p><span id="more"></span><h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><p>封面图是我利用柏林噪声实现的地图生成器。以下是绘制逻辑的主要代码，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">0</span>; x &lt; xMax; x++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> y = <span class="number">0</span>; y &lt; yMax; y++) &#123;</span><br><span class="line">    <span class="keyword">const</span> v = noise(x, y);</span><br><span class="line">    <span class="keyword">if</span> (v &gt; <span class="number">0.8</span>) &#123;</span><br><span class="line">      drawBlock(x, y, <span class="string">&#x27;#eeeeee&#x27;</span>) <span class="comment">// 海洋</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v &gt; <span class="number">0.6</span>) &#123;</span><br><span class="line">      drawBlock(x, y, <span class="string">&#x27;#168B67&#x27;</span>) <span class="comment">// 沙地</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v &gt; <span class="number">0.4</span>) &#123;</span><br><span class="line">      drawBlock(x, y, <span class="string">&#x27;#88F116&#x27;</span>) <span class="comment">// 平原</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v &gt; <span class="number">0.3</span>) &#123;</span><br><span class="line">      drawBlock(x, y, <span class="string">&#x27;#FFEB79&#x27;</span>) <span class="comment">// 高原</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      drawBlock(x, y, <span class="string">&#x27;#2EDFFF&#x27;</span>) <span class="comment">// 雪山</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先我把屏幕区域按照 BlockSize 分成 [xMax, yMax] 数量的区块，通过柏林噪声生成一张二维连续的高度图，noise(x, y) 取到高度值，根据高度值将 BlockType 划分为：海洋、沙地、平原、高原、雪山，然后给区块着色。</p><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>由以上案例可知，当入参 (x, y) 连续，noise(x, y) 的值也是连续的，那么 noise 函数是如何实现的呢？柏林噪声是一种 <a href="https://en.wikipedia.org/wiki/Gradient_noise">基于晶格的 (Lattice based)</a> 梯度噪声算法(Gradient Noise)。下面是算法解析：</p><h3 id="划分晶格"><a href="#划分晶格" class="headerlink" title="划分晶格"></a>划分晶格</h3><p>我们暂且以长度为 1 的晶格划分整个二维空间，如下图，当我们的入参 (x, y) 为 (3.7, 2.7) 时，坐标点将落入右侧的正方形晶格中。</p><p><img src="/static/posts/20211019_%E6%9F%8F%E6%9E%97%E5%99%AA%E5%A3%B0%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90/image_1.png"></p><h3 id="梯度向量"><a href="#梯度向量" class="headerlink" title="梯度向量"></a>梯度向量</h3><p>然后我们分别以正方形的 4 个晶格为原点，各自生成一个 <strong>伪随机</strong> 的梯度向量，如下面左图中的 G1、G2、G3、G4。顶点的梯度向量代表 该顶点对于晶格内点的 <strong>影响</strong> 。 伪随机的含义是当 seed 一定时，梯度向量也相同。</p><div style="width: 100%; overflow: hidden; margin-bottom: 10px">  <img style="width: 40.8%; float: left" src="/static/posts/20211019_柏林噪声算法解析/image_2.png">  <img style="width: 59.1%; float: right" src="/static/posts/20211019_柏林噪声算法解析/image_3.png"></div><p>打个简单的比方，晶格空间内原本分布着均匀的像素点，这时候四个顶点分别有 4 个沿着向量方向的力进行拉扯，沿着力的方向像素点越密集，就像右上这样，越接近黄色的区域，空间分布越密集，影响值越大。</p><h3 id="距离向量"><a href="#距离向量" class="headerlink" title="距离向量"></a>距离向量</h3><p>怎么去量化这种 影响 呢？我们引入距离向量。如下图所示，对于空间内的点 P(x, y)，四个顶点分别生成了指向它的距离向量 D1、D2、D3、D4。</p><img style="width: 50%" src="/static/posts/20211019_柏林噪声算法解析/image_4.png"><p>顶点对该点的影响值即为梯度向量 G 与距离向量 D 的点积。由此我们得到：</p><p>$$<br>\begin{cases}<br>u_1 = \overrightarrow {G_1} \centerdot \overrightarrow {D_1} \\<br>u_2 = \overrightarrow {G_2} \centerdot \overrightarrow {D_2} \\<br>u_3 = \overrightarrow {G_3} \centerdot \overrightarrow {D_3} \\<br>u_4 = \overrightarrow {G_4} \centerdot \overrightarrow {D_4}<br>\end{cases}<br>$$</p><h3 id="归一化处理"><a href="#归一化处理" class="headerlink" title="归一化处理"></a>归一化处理</h3><p>我们现在得到了 4 个标量 u1、u2、u3、u4，且都随变量 P(x, y) 连续变化，现在我们需要将他们合并成一个值 t，使得 t 同样随着 P(x, y) 连续变化。</p><p>$$<br>t_1 = lerp(u_1, u_2, x)<br>$$</p><p>$$<br>t_2 = lerp(u_3, u_4, x)<br>$$</p><p>$$<br>t = lerp(t_1, t_2, y)<br>$$</p><h3 id="插值函数"><a href="#插值函数" class="headerlink" title="插值函数"></a>插值函数</h3><p>上面公式中提到的 lerp 函数就是插值函数，其实在我们日常编码中经常会使用到，例如 css 的 transition-timing-function 的属性 linear、ease、ease-in、ease-out、ease-in-out 等等都是插值函数。他们的函数图像如下：</p><p><img src="/static/posts/20211019_%E6%9F%8F%E6%9E%97%E5%99%AA%E5%A3%B0%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90/image_5.png"></p><p>拿最简单的线性插值函数为例，实现代码如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lerp = <span class="function">(<span class="params">min, max, t</span>) =&gt;</span> min * (<span class="number">1</span> - t) + max * t;</span><br></pre></td></tr></table></figure><p>至此，我们根据传入点 (x, y) 通过算法 Perlin(x, y) 得到了一个归一化的结果 t，并且结果 t 会随着 (x, y) 的变化而连续变化，这就是柏林噪声算法。具体实现代码因为篇幅原因我就不贴出来了，感兴趣的同学可以根据上述分析自己实现一下。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;柏林噪声（Perlin Noise）算法是 Ken Perlin 发明的一种自然噪声生成算法，并在图形学领域广泛使用。例如模拟火焰、云彩的纹理、生成随机地形图等。&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://vincent0700.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="Typescript" scheme="https://vincent0700.com/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>glTF 2.0 格式详解</title>
    <link href="https://vincent0700.com/2021/09/23/20210922_glTF2.0%E6%A0%BC%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <id>https://vincent0700.com/2021/09/23/20210922_glTF2.0%E6%A0%BC%E5%BC%8F%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-09-23T15:00:00.000Z</published>
    <updated>2022-02-19T03:42:06.469Z</updated>
    
    <content type="html"><![CDATA[<p>glTF 全称 GL Transmission Format，是由现有 OpenGL 的维护组织 Khronos 推出的一种 3D 数据传输格式，常用于 WebGL 和 OpenGL。</p><span id="more"></span><h2 id="格式简介"><a href="#格式简介" class="headerlink" title="格式简介"></a>格式简介</h2><h3 id="格式特性"><a href="#格式特性" class="headerlink" title="格式特性"></a>格式特性</h3><ol><li>紧凑的文件大小。glTF JSON 文件本身是明文，紧凑且解析速度快，其他大型数据（如几何和动画）都存储在二进制文件中。</li><li>快速加载。glTF 的数据结构非常接近 GPU API，减少解析时间。</li><li>运行时独立性。glTF 不依赖任何 3D 引擎，不指定渲染和动画以外的运行时行为。</li><li>完整的 3D 场景表示。对于许多应用程序来说，从建模包中导出单个对象是不够的。通常，作者希望将整个场景（包括节点、变换、变换层次、网格、材质、相机和动画）加载到他们的应用程序中。glTF 努力保留所有这些信息以供下游应用程序使用。</li><li>可扩展性。虽然最初的基础规范支持丰富的功能集，但仍有许多增长和改进的机会。glTF 定义了一种机制，允许添加通用扩展。</li></ol><h3 id="与其他-3D-格式对比"><a href="#与其他-3D-格式对比" class="headerlink" title="与其他 3D 格式对比"></a>与其他 3D 格式对比</h3><table><thead><tr><th></th><th>mesh</th><th>材质</th><th>骨骼</th><th>动画</th><th>场景信息</th></tr></thead><tbody><tr><td>STL</td><td>✔</td><td>✖</td><td>✖</td><td>✖</td><td>✖</td></tr><tr><td>OBJ</td><td>✔</td><td>✔</td><td>✖</td><td>✖</td><td>✖</td></tr><tr><td>FBX</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td></tr><tr><td>glTF</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td></tr></tbody></table><h3 id="1-0-与-2-0-版本的区别"><a href="#1-0-与-2-0-版本的区别" class="headerlink" title="1.0 与 2.0 版本的区别"></a>1.0 与 2.0 版本的区别</h3><p>最主要的改动是 1.0 使用 glsl 去描述材质，而 2.0 使用了更加通用的 PBR 材质。</p><h2 id="格式解析"><a href="#格式解析" class="headerlink" title="格式解析"></a>格式解析</h2><p>glTF 由 JSON 文件、bin 文件和其他外部数据（如图片等）组成，JSON 文件的根节点属性见下图：</p><table><thead><tr><th></th><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>accessors</td><td>accessor [1-*]</td><td>An array of accessors.</td></tr><tr><td>animations</td><td>animation [1-*]    An array of keyframe animations.</td><td></td></tr><tr><td>asset</td><td>object    Metadata about the glTF asset.</td><td></td></tr><tr><td>buffers</td><td>buffer [1-*]    An array of buffers.</td><td></td></tr><tr><td>bufferViews</td><td>bufferView [1-*]    An array of bufferViews.</td><td></td></tr><tr><td>cameras</td><td>camera [1-*]</td><td>An array of cameras.</td></tr><tr><td>images</td><td>image [1-*]</td><td>An array of images.</td></tr><tr><td>materials</td><td>material</td><td>[1-*]    An array of materials.</td></tr><tr><td>meshes</td><td>mesh [1-*]</td><td>An array of meshes.</td></tr><tr><td>nodes</td><td>node [1-*]</td><td>An array of nodes.</td></tr><tr><td>samplers</td><td>sampler [1-*]</td><td>An array of samplers.</td></tr><tr><td>scene</td><td>integer</td><td>The index of the default scene.</td></tr><tr><td>scenes</td><td>scene [1-*]</td><td>An array of scenes.</td></tr><tr><td>skins</td><td>skin [1-*]</td><td>An array of skins.</td></tr><tr><td>textures</td><td>texture [1-*]</td><td>An array of textures.</td></tr><tr><td>extensions</td><td>object</td><td>Dictionary object with extension-specific objects.</td></tr><tr><td>extras</td><td>any</td><td>Application-specific data.</td></tr></tbody></table><h3 id="asset"><a href="#asset" class="headerlink" title="asset"></a>asset</h3><p>顶级必须包含 asset 属性，其中必须包含 version 指明 glTF 的版本，还可包含如下的其他附加信息。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;asset&quot;: &#123;</span><br><span class="line">  &quot;extras&quot;: &#123;</span><br><span class="line">    &quot;author&quot;: &quot;EdwinRC (https://sketchfab.com/Edwin3D)&quot;,</span><br><span class="line">    &quot;license&quot;: &quot;CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)&quot;,</span><br><span class="line">    &quot;source&quot;: &quot;https://sketchfab.com/3d-models/low-poly-winter-scene-2ffe1ed449414cc184078dd1e2882284&quot;,</span><br><span class="line">    &quot;title&quot;: &quot;Low Poly Winter Scene&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;generator&quot;: &quot;Sketchfab-4.86.2&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;2.0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="buffers-amp-bufferViews"><a href="#buffers-amp-bufferViews" class="headerlink" title="buffers &amp; bufferViews"></a>buffers &amp; bufferViews</h3><p>二进制数据和索引视图，如下，通过 uri 指明 buffer[0] -&gt; ./scene.bin，然后再 bufferView 中通过 offset 和 length 去索引 buffer 数据。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&quot;buffers&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;byteLength&quot;</span>: <span class="number">8570184</span>,</span><br><span class="line">    <span class="attr">&quot;uri&quot;</span>: <span class="string">&quot;scene.bin&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">],</span><br><span class="line">&quot;bufferViews&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;buffer&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;byteLength&quot;</span>: <span class="number">792612</span>,</span><br><span class="line">    <span class="attr">&quot;byteOffset&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;floatBufferViews&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="number">34963</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="scene-amp-scenes"><a href="#scene-amp-scenes" class="headerlink" title="scene &amp; scenes"></a>scene &amp; scenes</h3><p>scene 表明默认加载的场景，下面的结构表示默认会加载定义在 scenes[0] 的场景。场景是由 nodes 节点构成，节点是树状结构，如下则会加载根节点为 nodes[0] 的节点。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;scene&quot;: 0,</span><br><span class="line">&quot;scenes&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OSG_Scene&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;nodes&quot;</span>: [<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="nodes"><a href="#nodes" class="headerlink" title="nodes"></a>nodes</h3><p>节点和层次结构。节点类似图层的概念，可以包含 mesh 或应用平移 (translation)、旋转 (rotation)、缩放 (scale) 或任意矩阵变换 (matrix)，如下图，nodes[0] 包含子节点 nodes[1]，并且应用了旋转变换，这里旋转用四元数表示。而 nodes[1] 包含了 meshes[0] 的网格数据。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&quot;nodes&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;children&quot;</span>: [</span><br><span class="line">      <span class="number">1</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RootNode (gltf orientation matrix)&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;rotation&quot;</span>: [</span><br><span class="line">      <span class="number">-0.70710678118654746</span>,</span><br><span class="line">      <span class="number">-0</span>,</span><br><span class="line">      <span class="number">-0</span>,</span><br><span class="line">      <span class="number">0.70710678118654757</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;mesh&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Cylinder.008_0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="meshes"><a href="#meshes" class="headerlink" title="meshes"></a>meshes</h3><p>网格数据是模型最重要的部分，如下所示，meshes[0] 是一个 Cylinder.008_0 的圆柱体网格。 attributes 的数据会直接传入 vertex shader，它们的含义如下：</p><ul><li>POSITION 顶点坐标</li><li>NORMAL 法向量</li><li>TANGENT 切向量</li><li>COLOR_0 顶点颜色</li><li>TEXCOORD_0 贴图UV，可以看出 glTF 支持多组 UV</li></ul><p>它们的值是 accessor 的索引，最终会取到 bufferView -&gt; buffer 中的数据。例如 POSITION 应该是 XYZ 坐标的数组，TEXCOORD_0 应该 UV 坐标的数组。</p><p>mode 和 indices 涉及到图元装配，mode 是枚举类型，与 WebGL 中定义的一致：</p><table><thead><tr><th>类型</th><th>取值</th></tr></thead><tbody><tr><td>POINTS</td><td>0</td></tr><tr><td>LINES</td><td>1</td></tr><tr><td>LINE_LOOP</td><td>2</td></tr><tr><td>LINE_STRIP</td><td>3</td></tr><tr><td>TRIANGLES</td><td>4</td></tr><tr><td>TRIANGLE_STRIP</td><td>5</td></tr><tr><td>TRIANGLE_FAN</td><td>6</td></tr></tbody></table><p>所以这里 indices 为三角形 mesh 顶点的索引数组，数据也是通过 accessor 索引。<br>material 是材质的索引，存放在 materials[0]。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&quot;meshes&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Cylinder.008_0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;primitives&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;attributes&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;COLOR_0&quot;</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">&quot;NORMAL&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;POSITION&quot;</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">&quot;TANGENT&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;TEXCOORD_0&quot;</span>: <span class="number">4</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;indices&quot;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">&quot;material&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;mode&quot;</span>: <span class="number">4</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="accessors"><a href="#accessors" class="headerlink" title="accessors"></a>accessors</h3><p>访问器。是 glTF 特有的访问数据的结构，它关联了 bufferView 声明的数据切片，指明了数据类型，同时也附带了额外信息，如 min、max、count 等。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&quot;accessors&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;bufferView&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;componentType&quot;</span>: <span class="number">5126</span>,</span><br><span class="line">    <span class="attr">&quot;count&quot;</span>: <span class="number">25327</span>,</span><br><span class="line">    <span class="attr">&quot;max&quot;</span>: [<span class="number">15.562509536743164</span>, <span class="number">-45.877700805664062</span>, <span class="number">30.865560531616211</span>],</span><br><span class="line">    <span class="attr">&quot;min&quot;</span>: [<span class="number">-31.794599533081055</span>, <span class="number">-90.910537719726562</span>, <span class="number">-38.811481475830078</span>],</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;VEC3&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><table><thead><tr><th>类型</th><th>含义</th><th>元素数量</th></tr></thead><tbody><tr><td>SCALAR</td><td>标量</td><td>1</td></tr><tr><td>VEC2</td><td>元向量，常用于描述 uv</td><td>2</td></tr><tr><td>VEC3</td><td>3元向量，常用于描述 xyz 坐标或 rgb 颜色</td><td>3</td></tr><tr><td>VEC4</td><td>4元向量，常用于描述四元数或 rgba 颜色</td><td>4</td></tr><tr><td>MAT2</td><td>2阶矩阵</td><td>4</td></tr><tr><td>MAT3</td><td>3阶矩阵</td><td>9</td></tr><tr><td>MAT4</td><td>4阶矩阵</td><td>16</td></tr></tbody></table><h3 id="materials"><a href="#materials" class="headerlink" title="materials"></a>materials</h3><p>材质。glTF 2.0 支持了 PBR 材质，PBR (Physically Based Rendering) 的含义是基于物理正确的方式来计算灯光与材质，也就是说 PBR 材质的渲染基于物理引擎而非渲染器。目前 PBR 材质已经被各种图形引擎和建模软件所支持，是一种通用的材质规范，因此也非常符合 glTF 的理念。具体 PBR 相关概念可以参考这篇文章 <a href="https://discoverthreejs.com/book/first-steps/physically-based-rendering/">Physically Based Rendering and Lighting</a></p><p>下面的例子定义了一个 PBR 材质，首先 doubleSided 表明了它是双面渲染的，然后 baseColorFactor 定义了它的基本颜色是 rgba(1, 1, 1, 1) 的白色，baseColorTexture 定义了贴图的索引和 uv，metallicFactor 描述了金属性，roughnessFactor 描述了粗糙程度。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&quot;materials&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;doubleSided&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Main&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;pbrMetallicRoughness&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;baseColorFactor&quot;</span>: [</span><br><span class="line">        <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;baseColorTexture&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;index&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;texCoord&quot;</span>: <span class="number">0</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;metallicFactor&quot;</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;roughnessFactor&quot;</span>: <span class="number">0.6</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="textures-amp-images"><a href="#textures-amp-images" class="headerlink" title="textures &amp; images"></a>textures &amp; images</h3><p>贴图。texture 对象的 source 和 sampler 关联了图片(images) 和采样器(samplers) 的索引。images 通过 uri 关联外部图片文件。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&quot;textures&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;sampler&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;source&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">],</span><br><span class="line">&quot;images&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;uri&quot;</span>: <span class="string">&quot;textures/Main_baseColor.png&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="samplers"><a href="#samplers" class="headerlink" title="samplers"></a>samplers</h3><p>采样器。描述了纹理映射的方式。其参数 magFilter、minFilter、wrapS、wrapT 都是枚举类型。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;samplers&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;magFilter&quot;</span>: <span class="number">9729</span>,</span><br><span class="line">    <span class="attr">&quot;minFilter&quot;</span>: <span class="number">9987</span>,</span><br><span class="line">    <span class="attr">&quot;wrapS&quot;</span>: <span class="number">10497</span>,</span><br><span class="line">    <span class="attr">&quot;wrapT&quot;</span>: <span class="number">10497</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="magFilter"><a href="#magFilter" class="headerlink" title="magFilter"></a>magFilter</h4><p>拉伸纹理，表示三角面大而纹理小的情况，取值如下</p><table><thead><tr><th>类型</th><th>取值</th><th>含义</th></tr></thead><tbody><tr><td>NEAREST</td><td>9728</td><td>取临近点的颜色，对应 GL_NEAREST</td></tr><tr><td>LINEAR</td><td>9729</td><td>线性插值，对应 GL_LINEAR</td></tr></tbody></table><h4 id="minFilter"><a href="#minFilter" class="headerlink" title="minFilter"></a>minFilter</h4><p>压缩纹理，表示三角面小而纹理大的情况，增加 mipmap 的情况，概念和上面类似，取值如下</p><table><thead><tr><th>类型</th><th>取值</th></tr></thead><tbody><tr><td>NEAREST</td><td>9728</td></tr><tr><td>LINEAR</td><td>9729</td></tr><tr><td>NEAREST_MIPMAP_NEAREST</td><td>9984</td></tr><tr><td>LINEAR_MIPMAP_NEAREST</td><td>9985</td></tr><tr><td>NEAREST_MIPMAP_LINEA</td><td>9986</td></tr><tr><td>LINEAR_MIPMAP_LINEAR</td><td>9987</td></tr></tbody></table><h4 id="wrapS"><a href="#wrapS" class="headerlink" title="wrapS"></a>wrapS</h4><p>横轴 wrap mode</p><table><thead><tr><th>类型</th><th>取值</th><th>示例</th></tr></thead><tbody><tr><td>CLAMP_TO_EDGE</td><td>33071</td><td><img src="/static/posts/20210922_glTF2.0格式详解/clamp_to_edge.png" style="width: 200px" /></td></tr><tr><td>MIRRORED_REPEAT</td><td>33648</td><td><img src="/static/posts/20210922_glTF2.0格式详解/mirrored_repeat.png" style="width: 200px" /></td></tr><tr><td>REPEAT</td><td>10497</td><td><img src="/static/posts/20210922_glTF2.0格式详解/repeat.png" style="width: 200px" /></td></tr></tbody></table><h4 id="wrapT"><a href="#wrapT" class="headerlink" title="wrapT"></a>wrapT</h4><p>纵轴 wrap mode，取值同 wrapS</p><h2 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h2><p>最后附一张官方给出的 glTF 格式的属性节点关系图，便于理清各个节点的映射关系，如果还有细节的地方不明白，可以参考 <a href="https://www.khronos.org/registry/glTF/specs/2.0/glTF-2.0.html">glTF 2.0 官方文档</a></p><p><img src="/static/posts/20210922_glTF2.0%E6%A0%BC%E5%BC%8F%E8%AF%A6%E8%A7%A3/flow.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;glTF 全称 GL Transmission Format，是由现有 OpenGL 的维护组织 Khronos 推出的一种 3D 数据传输格式，常用于 WebGL 和 OpenGL。&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://vincent0700.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="WebGL" scheme="https://vincent0700.com/tags/WebGL/"/>
    
  </entry>
  
  <entry>
    <title>用 TS 类型系统实现大数加法</title>
    <link href="https://vincent0700.com/2021/09/11/20210911_%E7%94%A8TS%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0%E5%A4%A7%E6%95%B0%E5%8A%A0%E6%B3%95/"/>
    <id>https://vincent0700.com/2021/09/11/20210911_%E7%94%A8TS%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0%E5%A4%A7%E6%95%B0%E5%8A%A0%E6%B3%95/</id>
    <published>2021-09-11T15:00:00.000Z</published>
    <updated>2022-02-19T03:47:27.277Z</updated>
    
    <content type="html"><![CDATA[<p>网上有很多实现 TS 加法的奇淫技巧，但是都有很多限制，没法实现太大的数字计算，如何实现一种高效的大数加法呢？</p><span id="more"></span><h2 id="实现的结果"><a href="#实现的结果" class="headerlink" title="实现的结果"></a>实现的结果</h2><p><img src="/static/posts/20210911_%E7%94%A8TS%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0%E5%A4%A7%E6%95%B0%E5%8A%A0%E6%B3%95/result.png"></p><h2 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h2><h3 id="String-gt-Number"><a href="#String-gt-Number" class="headerlink" title="String -&gt; Number[]"></a>String -&gt; Number[]</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> DigitRangeMap = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">type</span> Digit = DigitRangeMap[<span class="built_in">number</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ToDigit&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>&gt; =</span><br><span class="line">  T <span class="keyword">extends</span> keyof DigitRangeMap</span><br><span class="line">    ? DigitRangeMap[T]</span><br><span class="line">    : <span class="built_in">never</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">type</span> ToDigitList&lt;T, R <span class="keyword">extends</span> <span class="built_in">any</span>[] = []&gt;  =</span><br><span class="line">  T <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer First&#125;</span><span class="subst">$&#123;infer Rest&#125;</span>`</span></span><br><span class="line">    ? ToDigitList&lt;Rest, [ToDigit&lt;First&gt;, ...R]&gt;</span><br><span class="line">    : R;</span><br><span class="line"></span><br><span class="line"><span class="comment">// debug</span></span><br><span class="line"><span class="keyword">type</span> test = ToDigitList&lt;<span class="string">&quot;1234&quot;</span>&gt;; <span class="comment">// [4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><p>首先我会把 String 转为 Number 数组，ToDigitList 就是做这个事的，考略到后面方便逐位相加，所以结果处理成倒序。</p><h3 id="一位数相加"><a href="#一位数相加" class="headerlink" title="一位数相加"></a>一位数相加</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> AdditionMap = [</span><br><span class="line">  [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>],</span><br><span class="line">  [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>],</span><br><span class="line">  [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>],</span><br><span class="line">  [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>],</span><br><span class="line">  [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>],</span><br><span class="line">  [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>],</span><br><span class="line">  [<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>],</span><br><span class="line">  [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AddOneDigit&lt;A <span class="keyword">extends</span> Digit, B <span class="keyword">extends</span> Digit&gt; = AdditionMap[A][B];</span><br><span class="line"></span><br><span class="line"><span class="comment">// debug</span></span><br><span class="line"><span class="keyword">type</span> test = AddOneDigit&lt;<span class="number">9</span>,<span class="number">8</span>&gt;; <span class="comment">// 17</span></span><br></pre></td></tr></table></figure><p>一位数相加，总共也就只有 100 种情况，为了提高性能，我选择了打表。如果给 A, B 再排一下序，表的体积还能再缩小一半。</p><h3 id="处理进位"><a href="#处理进位" class="headerlink" title="处理进位"></a>处理进位</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> RoundMap = &#123; </span><br><span class="line">  <span class="number">10</span>:<span class="number">0</span>; <span class="number">11</span>:<span class="number">1</span>; <span class="number">12</span>:<span class="number">2</span>; <span class="number">13</span>:<span class="number">3</span>; <span class="number">14</span>:<span class="number">4</span>; <span class="number">15</span>:<span class="number">5</span>; <span class="number">16</span>:<span class="number">6</span>; <span class="number">17</span>:<span class="number">7</span>; <span class="number">18</span>:<span class="number">8</span>; <span class="number">19</span>:<span class="number">9</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Carry&lt;T <span class="keyword">extends</span> <span class="built_in">number</span>, R <span class="keyword">extends</span> <span class="built_in">number</span>[] = []&gt; =</span><br><span class="line">  T <span class="keyword">extends</span> keyof RoundMap</span><br><span class="line">    ? [<span class="number">1</span>, [RoundMap[T], ...R]]</span><br><span class="line">    : [<span class="number">0</span>, [T, ...R]];</span><br><span class="line"> </span><br><span class="line"><span class="comment">// debug</span></span><br><span class="line"><span class="keyword">type</span> test = Carry&lt;<span class="number">15</span>, [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]&gt;; <span class="comment">// [1, [5, 3, 2, 1]]</span></span><br></pre></td></tr></table></figure><p>Carry 的第一个参数 T 是上一步一位数加法 AddOneDigit 返回的结果，结果范围 0 ~ 19，为什么不是 0 ~ 18 呢？因为还可能有进位 1。因为情况较少，所以还是使用打表计算。第二个参数 R 是前面 N 位计算的结果，类型是 Digit[]。<br>返回的结果是一个 Array，第一个值是进位 0 | 1，第二个值是新增了一位后的结果，类型是 Digit []。</p><h3 id="多位数相加"><a href="#多位数相加" class="headerlink" title="多位数相加"></a>多位数相加</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> IncMap = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Shift&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; =</span><br><span class="line">  T <span class="keyword">extends</span> [infer First, ...infer Rest]</span><br><span class="line">    ? Rest</span><br><span class="line">    : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AddDigitList&lt;</span><br><span class="line">  A <span class="keyword">extends</span> <span class="built_in">any</span>[],</span><br><span class="line">  B <span class="keyword">extends</span> <span class="built_in">any</span>[],</span><br><span class="line">  ACC <span class="keyword">extends</span> [<span class="number">0</span>|<span class="number">1</span>, <span class="built_in">number</span>[]] = [<span class="number">0</span>, []]</span><br><span class="line">&gt; =</span><br><span class="line">  A[<span class="string">&#x27;length&#x27;</span>] <span class="keyword">extends</span> <span class="number">0</span></span><br><span class="line">    ? B[<span class="string">&#x27;length&#x27;</span>] <span class="keyword">extends</span> <span class="number">0</span></span><br><span class="line">      <span class="comment">// A为空, B为空</span></span><br><span class="line">      ? ACC[<span class="number">0</span>] <span class="keyword">extends</span> <span class="number">1</span> ? AddDigitList&lt;[<span class="number">1</span>], [], [<span class="number">0</span>, ACC[<span class="number">1</span>]]&gt; : ACC[<span class="number">1</span>]</span><br><span class="line">      <span class="comment">// A为空, B非空</span></span><br><span class="line">      : AddDigitList&lt;A, Shift&lt;B&gt;, Carry&lt;AddOneDigit&lt;B[<span class="number">0</span>], ACC[<span class="number">0</span>]&gt;, ACC[<span class="number">1</span>]&gt;&gt;</span><br><span class="line">    : B[<span class="string">&#x27;length&#x27;</span>] <span class="keyword">extends</span> <span class="number">0</span></span><br><span class="line">       <span class="comment">// A非空, B为空</span></span><br><span class="line">      ? AddDigitList&lt;Shift&lt;A&gt;, B, Carry&lt;AddOneDigit&lt;A[<span class="number">0</span>], ACC[<span class="number">0</span>]&gt;, ACC[<span class="number">1</span>]&gt;&gt;</span><br><span class="line">       <span class="comment">// A非空, B非空</span></span><br><span class="line">      : AddDigitList&lt;</span><br><span class="line">          Shift&lt;A&gt;, Shift&lt;B&gt;, Carry&lt;</span><br><span class="line">            ACC[<span class="number">0</span>] <span class="keyword">extends</span> <span class="number">0</span></span><br><span class="line">              ? AddOneDigit&lt;A[<span class="number">0</span>], B[<span class="number">0</span>]&gt;</span><br><span class="line">              : IncMap[AddOneDigit&lt;A[<span class="number">0</span>], B[<span class="number">0</span>]&gt;],</span><br><span class="line">            ACC[<span class="number">1</span>]</span><br><span class="line">          &gt;</span><br><span class="line">        &gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// debug</span></span><br><span class="line"><span class="keyword">type</span> test = AddDigitList&lt;[<span class="number">2</span>,<span class="number">5</span>], [<span class="number">1</span>,<span class="number">5</span>]&gt;; <span class="comment">// [1,0,3]</span></span><br></pre></td></tr></table></figure><p>重点来了，AddDigitList 接受两个 Digit[] 类型，返回同样是 Digit[] 类型加法的结果。我用参数 ACC 承载上一步 Carry 的返回作为累加的结果，我用伪代码描述一下这部分逻辑：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a: <span class="built_in">number</span>[], b: <span class="built_in">number</span>[], acc = [<span class="number">0</span>, []]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> acc[<span class="number">0</span>] == <span class="number">1</span></span><br><span class="line">        ? fn([<span class="number">1</span>], [], [<span class="number">0</span>, acc[<span class="number">1</span>]])</span><br><span class="line">        : acc[<span class="number">1</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> fn(</span><br><span class="line">        a, b.slice(<span class="number">1</span>),</span><br><span class="line">        carry(add(b[<span class="number">0</span>], acc[<span class="number">0</span>]), acc[<span class="number">0</span>])</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (b.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> fn(</span><br><span class="line">        a.slice(<span class="number">1</span>), b,</span><br><span class="line">        carry(add(a[<span class="number">0</span>], acc[<span class="number">0</span>]), acc[<span class="number">0</span>])</span><br><span class="line">      )</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> fn(</span><br><span class="line">        a.slice(<span class="number">1</span>), b.slice(<span class="number">1</span>),</span><br><span class="line">        carry(add(add(a[<span class="number">0</span>], b[<span class="number">0</span>]), acc[<span class="number">0</span>]), acc[<span class="number">0</span>])</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Number-gt-String"><a href="#Number-gt-String" class="headerlink" title="Number[] -&gt; String"></a>Number[] -&gt; String</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> StrDigitRangeMap = [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DigitListToString&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], R <span class="keyword">extends</span> <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span>&gt; =</span><br><span class="line">  T <span class="keyword">extends</span> [infer First, ...infer Rest]</span><br><span class="line">    ? DigitListToString&lt;</span><br><span class="line">        Rest, </span><br><span class="line">        <span class="string">`<span class="subst">$&#123;R&#125;</span><span class="subst">$&#123;First <span class="keyword">extends</span> <span class="built_in">number</span> ? StrDigitRangeMap[First] : <span class="string">&#x27;n&#x27;</span> &#125;</span>`</span></span><br><span class="line">      &gt;</span><br><span class="line">    : R;</span><br><span class="line">      </span><br><span class="line"><span class="keyword">type</span> Add&lt;A <span class="keyword">extends</span> <span class="built_in">string</span>, B <span class="keyword">extends</span> <span class="built_in">string</span>&gt; =</span><br><span class="line">  DigitListToString&lt;AddDigitList&lt;ToDigitList&lt;A&gt;, ToDigitList&lt;B&gt;&gt;&gt;;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// debug</span></span><br><span class="line"><span class="keyword">type</span> result = Add&lt;</span><br><span class="line">  <span class="string">&quot;1248859103109591728912488591031095917289&quot;</span>,</span><br><span class="line">  <span class="string">&quot;32481239839485789343248123983948578934&quot;</span>&gt;;</span><br></pre></td></tr></table></figure><p>最后的处理，将 Digit[] 转为 String，看到结果顺滑的显示在我的 VSCode 提示框中，我不禁</p><p><img src="/static/posts/20210911_%E7%94%A8TS%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0%E5%A4%A7%E6%95%B0%E5%8A%A0%E6%B3%95/amazing.png"></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> DigitRangeMap = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">type</span> StrDigitRangeMap = [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>];</span><br><span class="line"><span class="keyword">type</span> RoundMap = &#123; <span class="number">10</span>:<span class="number">0</span>; <span class="number">11</span>:<span class="number">1</span>; <span class="number">12</span>:<span class="number">2</span>; <span class="number">13</span>:<span class="number">3</span>; <span class="number">14</span>:<span class="number">4</span>; <span class="number">15</span>:<span class="number">5</span>; <span class="number">16</span>:<span class="number">6</span>; <span class="number">17</span>:<span class="number">7</span>; <span class="number">18</span>:<span class="number">8</span>; <span class="number">19</span>:<span class="number">9</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> AdditionMap = [</span><br><span class="line">  [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>],</span><br><span class="line">  [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>],</span><br><span class="line">  [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>],</span><br><span class="line">  [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>],</span><br><span class="line">  [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>],</span><br><span class="line">  [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>],</span><br><span class="line">  [<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>],</span><br><span class="line">  [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>]</span><br><span class="line">];</span><br><span class="line"><span class="keyword">type</span> IncMap = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Digit = DigitRangeMap[<span class="built_in">number</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ToDigit&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>&gt; =</span><br><span class="line">  T <span class="keyword">extends</span> keyof DigitRangeMap</span><br><span class="line">    ? DigitRangeMap[T]</span><br><span class="line">    : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ToDigitList&lt;T, R <span class="keyword">extends</span> <span class="built_in">any</span>[] = []&gt;  =</span><br><span class="line">  T <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer First&#125;</span><span class="subst">$&#123;infer Rest&#125;</span>`</span></span><br><span class="line">    ? ToDigitList&lt;Rest, [ToDigit&lt;First&gt;, ...R]&gt;</span><br><span class="line">    : R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Shift&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; =</span><br><span class="line">  T <span class="keyword">extends</span> [infer First, ...infer Rest]</span><br><span class="line">    ? Rest</span><br><span class="line">    : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Carry&lt;T <span class="keyword">extends</span> <span class="built_in">number</span>, R <span class="keyword">extends</span> <span class="built_in">number</span>[] = []&gt; =</span><br><span class="line">  T <span class="keyword">extends</span> keyof RoundMap</span><br><span class="line">    ? [<span class="number">1</span>, [RoundMap[T], ...R]]</span><br><span class="line">    : [<span class="number">0</span>, [T, ...R]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AddOneDigit&lt;A <span class="keyword">extends</span> Digit, B <span class="keyword">extends</span> Digit&gt; = AdditionMap[A][B];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AddDigitList&lt;</span><br><span class="line">  A <span class="keyword">extends</span> <span class="built_in">any</span>[],</span><br><span class="line">  B <span class="keyword">extends</span> <span class="built_in">any</span>[],</span><br><span class="line">  ACC <span class="keyword">extends</span> [<span class="number">0</span>|<span class="number">1</span>, <span class="built_in">number</span>[]] = [<span class="number">0</span>, []]</span><br><span class="line">&gt; =</span><br><span class="line">  A[<span class="string">&#x27;length&#x27;</span>] <span class="keyword">extends</span> <span class="number">0</span></span><br><span class="line">    ? B[<span class="string">&#x27;length&#x27;</span>] <span class="keyword">extends</span> <span class="number">0</span></span><br><span class="line">      ? ACC[<span class="number">0</span>] <span class="keyword">extends</span> <span class="number">1</span> ? AddDigitList&lt;[<span class="number">1</span>], [], [<span class="number">0</span>, ACC[<span class="number">1</span>]]&gt; : ACC[<span class="number">1</span>]</span><br><span class="line">      : AddDigitList&lt;A, Shift&lt;B&gt;, Carry&lt;AddOneDigit&lt;B[<span class="number">0</span>], ACC[<span class="number">0</span>]&gt;, ACC[<span class="number">1</span>]&gt;&gt;</span><br><span class="line">    : B[<span class="string">&#x27;length&#x27;</span>] <span class="keyword">extends</span> <span class="number">0</span></span><br><span class="line">      ? AddDigitList&lt;Shift&lt;A&gt;, B, Carry&lt;AddOneDigit&lt;A[<span class="number">0</span>], ACC[<span class="number">0</span>]&gt;, ACC[<span class="number">1</span>]&gt;&gt;</span><br><span class="line">      : AddDigitList&lt;</span><br><span class="line">          Shift&lt;A&gt;, Shift&lt;B&gt;, Carry&lt;</span><br><span class="line">            ACC[<span class="number">0</span>] <span class="keyword">extends</span> <span class="number">0</span></span><br><span class="line">              ? AddOneDigit&lt;A[<span class="number">0</span>], B[<span class="number">0</span>]&gt;</span><br><span class="line">              : IncMap[AddOneDigit&lt;A[<span class="number">0</span>], B[<span class="number">0</span>]&gt;],</span><br><span class="line">            ACC[<span class="number">1</span>]</span><br><span class="line">          &gt;</span><br><span class="line">        &gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DigitListToString&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], R <span class="keyword">extends</span> <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span>&gt; =</span><br><span class="line">  T <span class="keyword">extends</span> [infer First, ...infer Rest]</span><br><span class="line">    ? DigitListToString&lt;</span><br><span class="line">        Rest, </span><br><span class="line">        <span class="string">`<span class="subst">$&#123;R&#125;</span><span class="subst">$&#123;First <span class="keyword">extends</span> <span class="built_in">number</span> ? StrDigitRangeMap[First] : <span class="string">&#x27;n&#x27;</span> &#125;</span>`</span></span><br><span class="line">      &gt;</span><br><span class="line">    : R;</span><br><span class="line">      </span><br><span class="line"><span class="keyword">type</span> Add&lt;A <span class="keyword">extends</span> <span class="built_in">string</span>, B <span class="keyword">extends</span> <span class="built_in">string</span>&gt; =</span><br><span class="line">  DigitListToString&lt;AddDigitList&lt;ToDigitList&lt;A&gt;, ToDigitList&lt;B&gt;&gt;&gt;;</span><br></pre></td></tr></table></figure><blockquote><p>本文已转载到 <a href="https://juejin.cn/post/7020661577938370596">掘金</a> 和 <a href="https://zhuanlan.zhihu.com/p/423175613">知乎</a> 字节前端账号。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;网上有很多实现 TS 加法的奇淫技巧，但是都有很多限制，没法实现太大的数字计算，如何实现一种高效的大数加法呢？&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://vincent0700.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="Typescript" scheme="https://vincent0700.com/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>Vue 源码阅读</title>
    <link href="https://vincent0700.com/2021/05/26/20210526_Vue3%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>https://vincent0700.com/2021/05/26/20210526_Vue3%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</id>
    <published>2021-05-26T13:00:00.000Z</published>
    <updated>2021-10-12T16:28:40.813Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司项目逐渐从 Vue2 迁到 Vue3，我也趁机补一波干货，下面的一些篇幅将会记录我阅读 Vue3 源码的过程和一些思考。</p><span id="more"></span><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>首先下载源码，Vue3 尤大大切了一个新的仓库去写，仓库名是 <code>vue-next</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/vuejs/vue-next.git</span><br></pre></td></tr></table></figure><p>首先看了一下项目结构，很明显是一个 Monorepo 组织的项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├── packages</span><br><span class="line">│   ├── compiler-core       &#x2F;&#x2F; 编译器核心</span><br><span class="line">│   ├── compiler-dom        &#x2F;&#x2F; 编译DOM</span><br><span class="line">│   ├── compiler-sfc        &#x2F;&#x2F; 编译Vue单文件</span><br><span class="line">│   ├── compiler-ssr        &#x2F;&#x2F; 编译服务端渲染</span><br><span class="line">│   ├── reactivity          &#x2F;&#x2F; 响应式代码</span><br><span class="line">│   ├── runtime-core        &#x2F;&#x2F; 运行时核心</span><br><span class="line">│   ├── runtime-dom         &#x2F;&#x2F; 运行时DOM</span><br><span class="line">│   ├── runtime-test        &#x2F;&#x2F; 内部测试代码</span><br><span class="line">│   ├── server-renderer     &#x2F;&#x2F; 服务端渲染</span><br><span class="line">│   ├── shared              &#x2F;&#x2F; 共享的工具库</span><br><span class="line">│   ├── vue                 &#x2F;&#x2F; 主入口文件</span><br><span class="line">│   ├── vue-compat          &#x2F;&#x2F; 提供兼容Vue2的能力</span><br></pre></td></tr></table></figure><p>接着，我执行了一下 <code>npm install</code> 发现报错了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ npm i</span><br><span class="line"></span><br><span class="line">&gt; @3.1.0-beta.4 preinstall /Users/vincent/Workspace/vue-next</span><br><span class="line">&gt; node ./scripts/checkYarn.js</span><br><span class="line"></span><br><span class="line">This repository requires Yarn 1.x <span class="keyword">for</span> scripts to work properly.</span><br></pre></td></tr></table></figure><p>看了下 scripts，原来是 preinstall 的时候执行了 checkYarn.js 这个脚本去判断包管理工具，所以我继续执行 <code>yarn</code> 安装依赖。然后执行 <code>yarn dev</code> 开发环境打包试了一下，编译结果放在 ./vue/dist/vue.global.js，但是没有生成 sourcemap，如果没有 sourcemap 后面就很不方便调试了。看了下打包脚本 <code>dev.js</code>，发现是有 sourcemap 参数的：</p><figure class="highlight js"><figcaption><span>./scripts/dev.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sourceMap = args.sourcemap || args.s</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>于是试了一下执行下面指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx node scripts/dev.js -s</span><br></pre></td></tr></table></figure><p>发现成功生成 vue.global.js.map，于是我在项目根目录，新建了一个 html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./packages/vue/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">    &#125;).mount(<span class="string">&#x27;#app&#x27;</span>);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后新建了 launch 脚本 (需要安装 Debugger for Chrome VSCode 插件)：</p><figure class="highlight json"><figcaption><span>./.vscode/launch.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;chrome&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Chrome Debug&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;file&quot;</span>: <span class="string">&quot;index.html&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;webRoot&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我在入口文件中第一个执行的函数 <code>registerRuntimeCompiler</code> 上下了个断点：</p><figure class="highlight js"><figcaption><span>./packages/vue/src/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; registerRuntimeCompiler(compileToFunction)</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>然后执行调试 (F5)，可以捕获到断点，至此 Vue3 的源码调试环境搭建完成。</p><h2 id="入口点分析"><a href="#入口点分析" class="headerlink" title="入口点分析"></a>入口点分析</h2><p>首先从入口文件 ./packages/vue/src/index.ts 分析：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; initDev &#125; <span class="keyword">from</span> <span class="string">&#x27;./dev&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; compile, CompilerOptions, CompilerError &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/compiler-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; registerRuntimeCompiler, RenderFunction, warn &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/runtime-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> runtimeDom <span class="keyword">from</span> <span class="string">&#x27;@vue/runtime-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; isString, NOOP, generateCodeFrame, extend &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/shared&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; InternalRenderFunction &#125; <span class="keyword">from</span> <span class="string">&#x27;packages/runtime-core/src/component&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">  initDev()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局编译缓存</span></span><br><span class="line"><span class="keyword">const</span> compileCache: Record&lt;string, RenderFunction&gt; = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compileToFunction</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  template: string | HTMLElement,</span></span></span><br><span class="line"><span class="function"><span class="params">  options?: CompilerOptions</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">RenderFunction</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!isString(template)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (template.nodeType) &#123;</span><br><span class="line">      <span class="comment">// 如果 template 是 HTMLElement，转为字符串</span></span><br><span class="line">      template = template.innerHTML</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      __DEV__ &amp;&amp; warn(<span class="string">`invalid template option: `</span>, template)</span><br><span class="line">      <span class="keyword">return</span> NOOP</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> key = template</span><br><span class="line">  <span class="keyword">const</span> cached = compileCache[key]</span><br><span class="line">  <span class="keyword">if</span> (cached) &#123;</span><br><span class="line">    <span class="comment">// 命中缓存</span></span><br><span class="line">    <span class="keyword">return</span> cached</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (template[<span class="number">0</span>] === <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果 template 是 element id，查询 HTMLElement，后转为字符串</span></span><br><span class="line">    <span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(template)</span><br><span class="line">    <span class="keyword">if</span> (__DEV__ &amp;&amp; !el) &#123;</span><br><span class="line">      warn(<span class="string">`Template element not found or is empty: <span class="subst">$&#123;template&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// __UNSAFE__</span></span><br><span class="line">    <span class="comment">// Reason: potential execution of JS expressions in in-DOM template.</span></span><br><span class="line">    <span class="comment">// The user must make sure the in-DOM template is trusted. If it&#x27;s rendered</span></span><br><span class="line">    <span class="comment">// by the server, the template should not contain any user data.</span></span><br><span class="line">    <span class="comment">// 这里意思是说使用 element id 不安全，template 可能会执行不安全的 js</span></span><br><span class="line">    template = el ? el.innerHTML : <span class="string">``</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用 @vue/compiler-dom 的 compile 函数编译模板，返回结果是用于渲染 DOM 的源码</span></span><br><span class="line">  <span class="keyword">const</span> &#123; code &#125; = compile(</span><br><span class="line">    template,</span><br><span class="line">    extend(</span><br><span class="line">      &#123;</span><br><span class="line">        hoistStatic: <span class="literal">true</span>,</span><br><span class="line">        onError: __DEV__ ? onError : <span class="literal">undefined</span>,</span><br><span class="line">        onWarn: __DEV__ ? <span class="function"><span class="params">e</span> =&gt;</span> onError(e, <span class="literal">true</span>) : NOOP</span><br><span class="line">      &#125; <span class="keyword">as</span> CompilerOptions,</span><br><span class="line">      options</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onError</span>(<span class="params">err: CompilerError, asWarning = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> message = asWarning</span><br><span class="line">      ? err.message</span><br><span class="line">      : <span class="string">`Template compilation error: <span class="subst">$&#123;err.message&#125;</span>`</span></span><br><span class="line">    <span class="keyword">const</span> codeFrame =</span><br><span class="line">      err.loc &amp;&amp;</span><br><span class="line">      generateCodeFrame(</span><br><span class="line">        template <span class="keyword">as</span> string,</span><br><span class="line">        err.loc.start.offset,</span><br><span class="line">        err.loc.end.offset</span><br><span class="line">      )</span><br><span class="line">    warn(codeFrame ? <span class="string">`<span class="subst">$&#123;message&#125;</span>\n<span class="subst">$&#123;codeFrame&#125;</span>`</span> : message)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把刚才 compiler 编译后的代码封装成函数，处理了全局 Vue 引入的情况</span></span><br><span class="line">  <span class="keyword">const</span> render = (__GLOBAL__</span><br><span class="line">    ? <span class="keyword">new</span> <span class="built_in">Function</span>(code)()</span><br><span class="line">    : <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&#x27;Vue&#x27;</span>, code)(runtimeDom)) <span class="keyword">as</span> RenderFunction</span><br><span class="line"></span><br><span class="line">  <span class="comment">// mark the function as runtime compiled</span></span><br><span class="line">  ;(render <span class="keyword">as</span> InternalRenderFunction)._rc = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 缓存编译结果并输出 render 函数</span></span><br><span class="line">  <span class="keyword">return</span> (compileCache[key] = render)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册编译函数，跳进去能发先就是吧参数 compileToFunction 函数放到全局</span></span><br><span class="line">registerRuntimeCompiler(compileToFunction)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; compileToFunction <span class="keyword">as</span> compile &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露 runtime 方法，例如 createApp 等等</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;@vue/runtime-dom&#x27;</span></span><br></pre></td></tr></table></figure><p>入口点的逻辑很简单，就是封装 @vue/compiler-dom 的 <code>compile</code> 函数，处理模板，添加缓存，注册编译函数。</p><h2 id="createApp"><a href="#createApp" class="headerlink" title="createApp"></a>createApp</h2><p>当注册完编译函数后，紧接着就是调用 <code>Vue.createApp</code> 来创建 Vue 实例了，继续跟代码，在 @vue/runtime-dom 中找到 <code>createApp</code> 的定义。</p><figure class="highlight js"><figcaption><span>./packages/runtime-dom/src/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ensureRenderer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> renderer || (renderer = createRenderer&lt;Node, Element&gt;(rendererOptions))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createApp = (<span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 构建 app 实例，最终会 return 出去</span></span><br><span class="line">  <span class="keyword">const</span> app = ensureRenderer().createApp(...args)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    injectNativeTagCheck(app)</span><br><span class="line">    injectCompilerOptionsCheck(app)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; mount &#125; = app</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重载 app.mount 方法</span></span><br><span class="line">  app.mount = (containerOrSelector: Element | ShadowRoot | string): <span class="function"><span class="params">any</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化容器</span></span><br><span class="line">    <span class="comment">// 例如 app.mount(&#x27;#app&#x27;)，container </span></span><br><span class="line">    <span class="keyword">const</span> container = normalizeContainer(containerOrSelector)</span><br><span class="line">    <span class="keyword">if</span> (!container) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> component = app._component</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此处省略一些兼容性代码</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 挂载前清空容器中的内容</span></span><br><span class="line">    container.innerHTML = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 @vue/runtime-core 中的 mount 的方法得到一个 Proxy 对象</span></span><br><span class="line">    <span class="keyword">const</span> proxy = mount(container, <span class="literal">false</span>, container <span class="keyword">instanceof</span> SVGElement)</span><br><span class="line">    <span class="keyword">if</span> (container <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">      container.removeAttribute(<span class="string">&#x27;v-cloak&#x27;</span>)</span><br><span class="line">      container.setAttribute(<span class="string">&#x27;data-v-app&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> proxy</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;) <span class="keyword">as</span> CreateAppFunction&lt;Element&gt;</span><br></pre></td></tr></table></figure><p>代码中首先间接调用 @vue/runtime-core 里的 <code>createRenderer</code> 函数创建全局 renderer 实例，然后调用它的 <code>createApp</code> 方法创建 app 实例，而后对返回的 app 实例的 <code>mount</code> 方法进行二次封装，开发模式注入了两个函数，一些兼容 Vue2 的代码等，这些就不深入去看了，所以其实核心都在 core 包里。</p><figure class="highlight js"><figcaption><span>./packages/runtime-core/src/renderer.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createRenderer</span>&lt;</span></span><br><span class="line"><span class="function">  <span class="title">HostNode</span> = <span class="title">RendererNode</span>,</span></span><br><span class="line"><span class="function">  <span class="title">HostElement</span> = <span class="title">RendererElement</span></span></span><br><span class="line"><span class="function">&gt;(<span class="params">options: RendererOptions&lt;HostNode, HostElement&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> baseCreateRenderer&lt;HostNode, HostElement&gt;(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseCreateRenderer</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  options: RendererOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">  createHydrationFns?: <span class="keyword">typeof</span> createHydrationFunctions</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 此处省略 2000 行代码</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    render,</span><br><span class="line">    hydrate,</span><br><span class="line">    createApp: createAppAPI(render, hydrate)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟进 createRenderer，它会调用 baseCreateRenderer，然后返回三个方法：</p><ul><li>render</li><li>hydrate </li><li>createApp</li></ul><p>其中 hydrate 主要跟服务端渲染相关，先跳过，而 createApp 是通过 createAppAPI 创建的，我们继续跟进去看看。</p><figure class="highlight js"><figcaption><span>./packages/runtime-core/apiCreateApp.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface App&lt;HostElement = any&gt; &#123;</span><br><span class="line">  version: string</span><br><span class="line">  config: AppConfig</span><br><span class="line">  use(plugin: Plugin, ...options: any[]): <span class="built_in">this</span></span><br><span class="line">  mixin(mixin: ComponentOptions): <span class="built_in">this</span></span><br><span class="line">  component(name: string): Component | <span class="literal">undefined</span></span><br><span class="line">  component(name: string, <span class="attr">component</span>: Component): <span class="built_in">this</span></span><br><span class="line">  directive(name: string): Directive | <span class="literal">undefined</span></span><br><span class="line">  directive(name: string, <span class="attr">directive</span>: Directive): <span class="built_in">this</span></span><br><span class="line">  mount(</span><br><span class="line">    rootContainer: HostElement | string,</span><br><span class="line">    isHydrate?: boolean,</span><br><span class="line">    isSVG?: boolean</span><br><span class="line">  ): ComponentPublicInstance</span><br><span class="line">  unmount(): <span class="keyword">void</span></span><br><span class="line">  provide&lt;T&gt;(key: InjectionKey&lt;T&gt; | string, <span class="attr">value</span>: T): <span class="built_in">this</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// internal, but we need to expose these for the server-renderer and devtools</span></span><br><span class="line">  _uid: number</span><br><span class="line">  _component: ConcreteComponent</span><br><span class="line">  _props: Data | <span class="literal">null</span></span><br><span class="line">  _container: HostElement | <span class="literal">null</span></span><br><span class="line">  _context: AppContext</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * v2 compat only</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  filter?(name: string): <span class="built_in">Function</span> | <span class="literal">undefined</span></span><br><span class="line">  filter?(name: string, <span class="attr">filter</span>: <span class="built_in">Function</span>): <span class="built_in">this</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@internal </span>v3 compat only</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _createRoot?(options: ComponentOptions): ComponentPublicInstance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface AppContext &#123;</span><br><span class="line">  app: App <span class="comment">// for devtools</span></span><br><span class="line">  config: AppConfig</span><br><span class="line">  mixins: ComponentOptions[]</span><br><span class="line">  components: Record&lt;string, Component&gt;</span><br><span class="line">  directives: Record&lt;string, Directive&gt;</span><br><span class="line">  provides: Record&lt;string | symbol, any&gt;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Flag for de-optimizing props normalization</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@internal</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  deopt?: boolean</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * HMR only</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@internal</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  reload?: <span class="function">() =&gt;</span> <span class="keyword">void</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * v2 compat only</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@internal</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  filters?: Record&lt;string, <span class="built_in">Function</span>&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本上从 interface 就能猜出 app 实例有那些功能，首先它会创建一个上下文对象 context，比如我们 use components，mixin 等等就会挂载 app context 的实例上。</p><h2 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h2><p>然后我们重点看一下 <code>mount</code> 函数，看一下 Vue3 的首次渲染都做了什么：</p><figure class="highlight js"><figcaption><span>./packages/runtime-core/apiCreateApp.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">mount(</span><br><span class="line">  rootContainer: HostElement,</span><br><span class="line">  isHydrate?: boolean,</span><br><span class="line">  isSVG?: boolean</span><br><span class="line">): any &#123;</span><br><span class="line">  <span class="keyword">if</span> (!isMounted) &#123;</span><br><span class="line">    <span class="comment">// 创建根节点</span></span><br><span class="line">    <span class="keyword">const</span> vnode = createVNode(</span><br><span class="line">      rootComponent <span class="keyword">as</span> ConcreteComponent,</span><br><span class="line">      rootProps</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 把 app 的 context 存在根节点上</span></span><br><span class="line">    vnode.appContext = context</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 热更新</span></span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">      context.reload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        render(cloneVNode(vnode), rootContainer, isSVG)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isHydrate &amp;&amp; hydrate) &#123;</span><br><span class="line">      <span class="comment">// SSR 相关</span></span><br><span class="line">      hydrate(vnode <span class="keyword">as</span> VNode&lt;Node, Element&gt;, rootContainer <span class="keyword">as</span> any)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 渲染根节点到根容器</span></span><br><span class="line">      render(vnode, rootContainer, isSVG)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 挂载完成</span></span><br><span class="line">    isMounted = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跟容器挂在 app 实例对象上</span></span><br><span class="line">    app._container = rootContainer</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// for devtools and telemetry</span></span><br><span class="line">    ;(rootContainer <span class="keyword">as</span> any).__vue_app__ = app</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (__DEV__ || __FEATURE_PROD_DEVTOOLS__) &#123;</span><br><span class="line">      devtoolsInitApp(app, version)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vnode.component!.proxy</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    warn(</span><br><span class="line">      <span class="string">`App has already been mounted.\n`</span> +</span><br><span class="line">        <span class="string">`If you want to remount the same app, move your app creation logic `</span> +</span><br><span class="line">        <span class="string">`into a factory function and create fresh app instances for each `</span> +</span><br><span class="line">        <span class="string">`mount - e.g. \`const createMyApp = () =&gt; createApp(App)\``</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><p>上面 mount 中的调用的 render 函数，其实就是之前提到的 <code>baseCreateRenderer</code> 函数中返回的 render。</p><figure class="highlight js"><figcaption><span>./packages/runtime-core/src/renderer.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> render: RootRenderFunction = <span class="function">(<span class="params">vnode, container, isSVG</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (vnode == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (container._vnode) &#123;</span><br><span class="line">      unmount(container._vnode, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 调用 patch 方法挂载 VNode 到 容器</span></span><br><span class="line">    patch(container._vnode || <span class="literal">null</span>, vnode, container, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, isSVG)</span><br><span class="line">  &#125;</span><br><span class="line">  flushPostFlushCbs()</span><br><span class="line">  container._vnode = vnode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现，render 其实调用的是 <code>patch</code> 函数，或者说这就是老生常谈的 <code>diff</code>，其实 baseRenderer 那两千多行的代码其实都是为了 <code>patch</code> 服务的。</p><figure class="highlight js"><figcaption><span>./packages/runtime-core/src/renderer.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> patch: PatchFn = (</span><br><span class="line">  n1, <span class="comment">// oldNode，当旧节点为 null 时表现为 mount</span></span><br><span class="line">  n2, <span class="comment">// newNode</span></span><br><span class="line">  container,</span><br><span class="line">  anchor = <span class="literal">null</span>,</span><br><span class="line">  parentComponent = <span class="literal">null</span>,</span><br><span class="line">  parentSuspense = <span class="literal">null</span>,</span><br><span class="line">  isSVG = <span class="literal">false</span>,</span><br><span class="line">  slotScopeIds = <span class="literal">null</span>,</span><br><span class="line">  optimized = <span class="literal">false</span></span><br><span class="line">) =&gt; &#123;</span><br><span class="line">  <span class="comment">// patching &amp; not same type, unmount old tree</span></span><br><span class="line">  <span class="keyword">if</span> (n1 &amp;&amp; !isSameVNodeType(n1, n2)) &#123;</span><br><span class="line">    anchor = getNextHostNode(n1)</span><br><span class="line">    unmount(n1, parentComponent, parentSuspense, <span class="literal">true</span>)</span><br><span class="line">    n1 = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (n2.patchFlag === PatchFlags.BAIL) &#123;</span><br><span class="line">    optimized = <span class="literal">false</span></span><br><span class="line">    n2.dynamicChildren = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; type, ref, shapeFlag &#125; = n2</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> Text:</span><br><span class="line">      processText(n1, n2, container, anchor)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> Comment:</span><br><span class="line">      processCommentNode(n1, n2, container, anchor)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> Static:</span><br><span class="line">      <span class="keyword">if</span> (n1 == <span class="literal">null</span>) &#123;</span><br><span class="line">        mountStaticNode(n2, container, anchor, isSVG)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">        patchStaticNode(n1, n2, container, isSVG)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> Fragment:</span><br><span class="line">      processFragment(</span><br><span class="line">        n1,</span><br><span class="line">        n2,</span><br><span class="line">        container,</span><br><span class="line">        anchor,</span><br><span class="line">        parentComponent,</span><br><span class="line">        parentSuspense,</span><br><span class="line">        isSVG,</span><br><span class="line">        slotScopeIds,</span><br><span class="line">        optimized</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">if</span> (shapeFlag &amp; ShapeFlags.ELEMENT) &#123;</span><br><span class="line">        processElement(</span><br><span class="line">          n1,</span><br><span class="line">          n2,</span><br><span class="line">          container,</span><br><span class="line">          anchor,</span><br><span class="line">          parentComponent,</span><br><span class="line">          parentSuspense,</span><br><span class="line">          isSVG,</span><br><span class="line">          slotScopeIds,</span><br><span class="line">          optimized</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeFlag &amp; ShapeFlags.COMPONENT) &#123;</span><br><span class="line">        processComponent(</span><br><span class="line">          n1,</span><br><span class="line">          n2,</span><br><span class="line">          container,</span><br><span class="line">          anchor,</span><br><span class="line">          parentComponent,</span><br><span class="line">          parentSuspense,</span><br><span class="line">          isSVG,</span><br><span class="line">          slotScopeIds,</span><br><span class="line">          optimized</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeFlag &amp; ShapeFlags.TELEPORT) &#123;</span><br><span class="line">        ;(type <span class="keyword">as</span> <span class="keyword">typeof</span> TeleportImpl).process(</span><br><span class="line">          n1 <span class="keyword">as</span> TeleportVNode,</span><br><span class="line">          n2 <span class="keyword">as</span> TeleportVNode,</span><br><span class="line">          container,</span><br><span class="line">          anchor,</span><br><span class="line">          parentComponent,</span><br><span class="line">          parentSuspense,</span><br><span class="line">          isSVG,</span><br><span class="line">          slotScopeIds,</span><br><span class="line">          optimized,</span><br><span class="line">          internals</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__FEATURE_SUSPENSE__ &amp;&amp; shapeFlag &amp; ShapeFlags.SUSPENSE) &#123;</span><br><span class="line">        ;(type <span class="keyword">as</span> <span class="keyword">typeof</span> SuspenseImpl).process(</span><br><span class="line">          n1,</span><br><span class="line">          n2,</span><br><span class="line">          container,</span><br><span class="line">          anchor,</span><br><span class="line">          parentComponent,</span><br><span class="line">          parentSuspense,</span><br><span class="line">          isSVG,</span><br><span class="line">          slotScopeIds,</span><br><span class="line">          optimized,</span><br><span class="line">          internals</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">        warn(<span class="string">&#x27;Invalid VNode type:&#x27;</span>, type, <span class="string">`(<span class="subst">$&#123;<span class="keyword">typeof</span> type&#125;</span>)`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set ref</span></span><br><span class="line">  <span class="keyword">if</span> (ref != <span class="literal">null</span> &amp;&amp; parentComponent) &#123;</span><br><span class="line">    setRef(ref, n1 &amp;&amp; n1.ref, parentSuspense, n2 || n1, !n2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟踪代码得知，首次渲染，n1 旧节点为 null，n2 为待渲染的节点，所以 <code>patch</code> 表现为挂载节点，后面替换节点的时候依然靠的是这个 <code>patch</code> 方法。相比于 Vue2 的 full diff，Vue3 显得智能很多，原因在 Vue3 会根据节点的类型分别调用不同的 process 函数，然后根据节点不同的 patchFlags，调用对应的 patch 方法。 </p><h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h2><p>响应式原理应该老生常谈了，Vue3 把响应式 API 单独抽出来一个 reactive 的包，并且改用 Proxy 作为它响应式的核心。记得之前写 Vue2 的时候最讨厌的就是碰到无法触发响应的数据要自己写一边 this.$set 方法，原因在于 defineProperty 对于类型支持的不完善，因此魔改了很多特殊数据类型的函数，比如 push、pop、slice 等，改成 Proxy 就舒服多了。下面我简单实现了一下 reactive 这个函数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Reactive Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> data = reactive(&#123;</span></span><br><span class="line">      a: &#123; b: &#123; c: 0 &#125;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">      data.a.b.c++</span><br><span class="line">    &#125;, 100);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">effectFn</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>).innerHTML = data.a.b.c;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> targetMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">target</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">get</span>(<span class="params">target, key, receiver</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> ret = <span class="built_in">Reflect</span>.get(target, key, receiver);</span></span><br><span class="line">          track(target, key);</span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (<span class="keyword">typeof</span> ret !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> ret</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> reactive(ret);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">set</span>(<span class="params">target, key, receiver</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> ret = <span class="built_in">Reflect</span>.set(target, key, receiver);</span></span><br><span class="line">          trigger(target, key);</span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> ret</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">track</span>(<span class="params">target, key</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> depsMap = targetMap.get(target);</span></span><br><span class="line">      if (!depsMap) &#123;</span><br><span class="line"><span class="javascript">        depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span></span><br><span class="line">        targetMap.set(target, depsMap);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> deps = depsMap.get(key);</span></span><br><span class="line">      if (!deps) &#123;</span><br><span class="line"><span class="javascript">        deps = <span class="keyword">new</span> <span class="built_in">Set</span>();</span></span><br><span class="line">        depsMap.set(key, deps);</span><br><span class="line">      &#125;</span><br><span class="line">      deps.add(effectFn)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">target, key</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> depsMap = targetMap.get(target);</span></span><br><span class="line">      if (depsMap) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> deps = depsMap.get(key);</span></span><br><span class="line">        if (deps) &#123;</span><br><span class="line"><span class="javascript">          deps.forEach(<span class="function"><span class="params">effect</span> =&gt;</span> effect());</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近公司项目逐渐从 Vue2 迁到 Vue3，我也趁机补一波干货，下面的一些篇幅将会记录我阅读 Vue3 源码的过程和一些思考。&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://vincent0700.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="Vue" scheme="https://vincent0700.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>使用 Test262 的正确姿势</title>
    <link href="https://vincent0700.com/2021/03/11/20210311_%E4%BD%BF%E7%94%A8Test262%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/"/>
    <id>https://vincent0700.com/2021/03/11/20210311_%E4%BD%BF%E7%94%A8Test262%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</id>
    <published>2021-03-11T13:00:00.000Z</published>
    <updated>2021-06-06T06:58:57.568Z</updated>
    
    <content type="html"><![CDATA[<p>Test262 是一套由 TC39 制定的标准化 ECMAScript 规范测试集。Test262 促成我们在不同的 JavaScript 运行环境中同样的 JavaScript 代码都能获得预期的同样结果，也将 JavaScript 语言的语义细节都使用避免歧义的标准文本在规范中详细地记录了下来，让我们更加容易理解 JavaScript 的行为。如果你不了觉 TC39 与 ECMAScript 的相关信息，可以看我之前写过的一篇文章 <a href="https://archive.vincent0700.com/2020/02/09/041_TC39_and_ECMAScript/">《TC39 与 ECMAScript 提案》</a>。</p><span id="more"></span><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取代码</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/tc39/test262.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装命令行工具</span></span><br><span class="line">$ npm i -g test262-harness</span><br></pre></td></tr></table></figure><p>所有的测试集都在 /test 目录，命令行只需要指定 JS 引擎和测试路径即可，比如现在我想测试一下 node 对内置对象 BigInt 的支持情况，我可以在 test262 项目下执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ test262-harness \</span><br><span class="line">--hostType=node \</span><br><span class="line">--hostPath=`<span class="built_in">which</span> node` \</span><br><span class="line"><span class="built_in">test</span>/built-ins/BigInt/**/*.js</span><br><span class="line"><span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">Ran 146 tests</span></span><br><span class="line"><span class="string">146 passed</span></span><br><span class="line"><span class="string">0 failed</span></span><br></pre></td></tr></table></figure><h2 id="测试-JS-引擎"><a href="#测试-JS-引擎" class="headerlink" title="测试 JS 引擎"></a>测试 JS 引擎</h2><p>下面是支持的 hostType：</p><table><thead><tr><th>Host</th><th>Name</th><th>Type</th><th>Supported Platforms</th></tr></thead><tbody><tr><td>ch¹</td><td>ChakraCore</td><td>CLI</td><td>Any</td></tr><tr><td>d8¹</td><td>V8</td><td>CLI</td><td>Any</td></tr><tr><td>engine262</td><td>Engine262</td><td>CLI</td><td>Any</td></tr><tr><td>graaljs</td><td>GraalJS</td><td>CLI</td><td>Any</td></tr><tr><td>jsshell¹</td><td>SpiderMonkey</td><td>CLI</td><td>Any</td></tr><tr><td>jsc¹</td><td>JavaScriptCore</td><td>CLI</td><td>Mac²</td></tr><tr><td>nashorn</td><td>Nashorn</td><td>CLI</td><td>Any</td></tr><tr><td>node</td><td>Node.js</td><td>CLI</td><td>Any</td></tr><tr><td>qjs<sup>4</sup></td><td>QuickJS</td><td>CLI</td><td>Any</td></tr><tr><td>xs</td><td>Moddable XS</td><td>CLI</td><td>Any</td></tr><tr><td>chrome</td><td>Google Chrome</td><td>Browser</td><td>Any</td></tr><tr><td>edge</td><td>Microsoft Edge</td><td>Browser</td><td>Windows</td></tr><tr><td>firefox</td><td>Mozilla Firefox</td><td>Browser</td><td>Any</td></tr><tr><td>safari</td><td>Apple Safari</td><td>Browser</td><td>Mac</td></tr></tbody></table><p>详情见 <a href="https://github.com/bterlson/eshost#supported-hosts">eshost</a></p><h2 id="测试-Polyfill"><a href="#测试-Polyfill" class="headerlink" title="测试 Polyfill"></a>测试 Polyfill</h2><p>例如你要实现一个 Promise 的 Polyfill：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># polyfill-promise.js</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过 prelude 参数调用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ test262-harness \</span><br><span class="line">--hostType=node \</span><br><span class="line">--hostPath=`<span class="built_in">which</span> node` \</span><br><span class="line">--prelude=/path/to/polyfill-promise.js \</span><br><span class="line"><span class="built_in">test</span>/built-ins/Promise/**/*.js</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Test262 是一套由 TC39 制定的标准化 ECMAScript 规范测试集。Test262 促成我们在不同的 JavaScript 运行环境中同样的 JavaScript 代码都能获得预期的同样结果，也将 JavaScript 语言的语义细节都使用避免歧义的标准文本在规范中详细地记录了下来，让我们更加容易理解 JavaScript 的行为。如果你不了觉 TC39 与 ECMAScript 的相关信息，可以看我之前写过的一篇文章 &lt;a href=&quot;https://archive.vincent0700.com/2020/02/09/041_TC39_and_ECMAScript/&quot;&gt;《TC39 与 ECMAScript 提案》&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="工具使用" scheme="https://vincent0700.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="Javascript" scheme="https://vincent0700.com/tags/Javascript/"/>
    
    <category term="TC39" scheme="https://vincent0700.com/tags/TC39/"/>
    
  </entry>
  
  <entry>
    <title>家庭网络改造，软路由 R4S 踩坑</title>
    <link href="https://vincent0700.com/2021/03/08/20210305_%E8%BD%AF%E8%B7%AF%E7%94%B1R4S%E8%B8%A9%E5%9D%91/"/>
    <id>https://vincent0700.com/2021/03/08/20210305_%E8%BD%AF%E8%B7%AF%E7%94%B1R4S%E8%B8%A9%E5%9D%91/</id>
    <published>2021-03-08T13:00:00.000Z</published>
    <updated>2021-03-17T13:57:39.141Z</updated>
    
    <content type="html"><![CDATA[<p>NanoPi R4S 是友善电子团队推出的一款 Arm 架构的软路由，这是 R2S 的升级版。之前用家里废弃的主机刷过 OpenWrt，但是主机同时需要常年开启，体积大没办法塞进弱电箱，还有功耗、噪音也成问题。这段时间家里准备装修，所以正好借此重新设计一下家里的弱电和网络结构，这款小巧的软路由正好符合我的需求。</p><span id="more"></span><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>下面科普一些网络方面的知识，仅供大家参考，大佬可以直接跳过。</p><h3 id="软路由"><a href="#软路由" class="headerlink" title="[ 软路由 ]"></a>[ 软路由 ]</h3><blockquote><p>是指利用台式机或服务器配合软件形成路由解决方案，主要靠软件的设置，达成路由器的功能；而硬路由则是以特有的硬设备，包括处理器、电源供应、嵌入式软件，提供设定的路由器功能。</p></blockquote><p>所以说，硬路由是专门为路由设计的嵌入式设备，考虑到成本、性价比、功耗等因素一般不会堆太多料，我目前用的 R7000 1GHz 双核、256MB RAM 在家用路由器里已经算非常不错了，若仅仅是路由功能，那么硬路由的性能绰绰有余所以我推荐如果不具备以下条件的朋友请勿购买软路由：</p><ol><li>了解基础的网络知识</li><li>有良好的心理素质，经得起折腾</li><li>确实有需求在路由器里跑一些程序</li></ol><h3 id="OpenWrt"><a href="#OpenWrt" class="headerlink" title="[ OpenWrt ]"></a>[ OpenWrt ]</h3><p>OpenWrt 是一个针对嵌入式设备而开发的一个 Linux 操作系统，目的是为了让用户更方便的操作固件而实现各种定制化的效果，现已广泛应用户软路由、嵌入式设备中。<a href="https://openwrt.org/zh/start">官方中文 Wiki</a></p><h3 id="五类线-vs-超五类线-vs-六类线"><a href="#五类线-vs-超五类线-vs-六类线" class="headerlink" title="[ 五类线 vs 超五类线 vs 六类线 ]"></a>[ 五类线 vs 超五类线 vs 六类线 ]</h3><p>五类线（CAT5）， 超五类（CAT5e)，六类线（CAT6）的网线最主要是在传输速率上面的区别。</p><table><thead><tr><th>种类</th><th>传输速率</th><th>如何区分</th></tr></thead><tbody><tr><td>CAT5</td><td>100 Mbps</td><td>外皮 CAT5 标识</td></tr><tr><td>CAT5e</td><td>100 - 1000 Mbps</td><td>外皮 CAT5e 标识</td></tr><tr><td>CAT6</td><td>1000 Mbps</td><td>外皮 CAT6 标识，内部增加了十字骨架，直径较粗</td></tr></tbody></table><h2 id="网络拓扑结构设计"><a href="#网络拓扑结构设计" class="headerlink" title="网络拓扑结构设计"></a>网络拓扑结构设计</h2><p>我家之前只有一台华硕 R7000 作为主路由 + AP，现在需要把软路由 R4S 作为主路由，R7000 仅当作 AP 使用，关闭路由功能。网络拓扑结构如下图所示：</p><p><img src="/static/posts/20210305_%E8%BD%AF%E8%B7%AF%E7%94%B1R4S%E8%B8%A9%E5%9D%91/network_topology_diagram.png"></p><h2 id="R4S-安装部署"><a href="#R4S-安装部署" class="headerlink" title="R4S 安装部署"></a>R4S 安装部署</h2><p>R4S 分 1G 和 4G RAM 两个版本，我买的是 4G 的，但实测下来应该 1G 版就绰绰有余了。然后外壳可选亚克力塑料外壳带风扇或者铝合金外壳被动散热，看知乎上大佬推荐的铝合金外壳就买了。另外我还买了一张 16G 的 tf 卡，因为 R4S 是不带内部存储的，系统是要自己刷进 tf 卡，所以这一项是必须的。当然某宝上也有全套懒人套餐。</p><h3 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h3><ol><li><p>买来第一件事就是刷机了，友善官方定制了一套 OpenWrt 的系统，但是官方系统是不带插件的，所以我推荐安装第三方固件。<br><a href="https://bigdongdong.gitbook.io/nanopi-r2s/">官方固件链接</a><br><a href="https://github.com/DHDAXCW/NanoPi-R4S-2021/releases/">第三方编译固件</a><br>第三方固件有很多版本，我推荐使用 ext4 版本的，文件名 *-ext4-sysupgrade.img.gz。</p></li><li><p>安装刷机工具 Etcher，macOS、Windows、Linux 都是支持的。<br><a href="https://www.balena.io/etcher/">Etcher 下载链接</a></p></li><li><p>然后把 tf 卡装进读卡器里，选择镜像就能卡刷了。</p></li><li><p>管理面板默认用户名/密码是root/password，ssh 默认开着的。</p></li></ol><h3 id="根路径扩容"><a href="#根路径扩容" class="headerlink" title="根路径扩容"></a>根路径扩容</h3><p>卡刷完默认是 4G 的磁盘，剩余 12G 的分区还没有创建，所以我们需要扩容一下，可以挂载到其他路径，不过我还是推荐直接挂载到根路径。具体操作步骤如下：</p><ol><li>选择 [系统] &gt; [磁盘管理] 可以看到我们的 tf 卡磁盘。</li><li>选择修改， 新增分区，容量为剩余空间。</li><li>ssh 登录，创建挂载点 /data，<code>mkdir -p /data</code>。</li><li>继续在管理面板 [磁盘管理] 中设置挂载点为 /data。</li><li>拷贝原来 /overlay 分区的内容，<code>cp -f -a /overlay/. /data</code>。</li><li>选择 [系统] &gt; [挂载点] 找到我们新增的挂载点 /data 的分区，选择修改。</li><li>启用挂载点，设置为外部 /overlay 使用，如下图所示：</li></ol><p><img src="/static/posts/20210305_%E8%BD%AF%E8%B7%AF%E7%94%B1R4S%E8%B8%A9%E5%9D%91/mount_point.png"></p><ol start="7"><li>重启 R4S，再次查看磁盘分区，发现根路径挂载分区的容量已修改。</li></ol><h3 id="配置动态域名解析"><a href="#配置动态域名解析" class="headerlink" title="配置动态域名解析"></a>配置动态域名解析</h3><p>如果你想让你的路由器能对外服务，那么你还需要绑定域名，家用宽带默认只会给你 NAT 转换后的 IP，不过你打电话给当地运营商的客服说要独立 IP，对方应该是会给你开的，不过常用的 80、443、22 等端口一般是封死的。</p><p>当地运营商给你的肯定是动态 IP，只要你重新拨号 IP 就会变更，这时候就的开启 DDns 已同步远端的 Dns 服务商重新解析。这里我推荐使用 <a href="dnspod.cn">dnspod</a> 免费 3 个域名解析，同时还支持动态解析。具体操作步骤如下：</p><ol><li>选择头像 &gt; [密钥管理]，添加密钥。</li></ol><p><img src="/static/posts/20210305_%E8%BD%AF%E8%B7%AF%E7%94%B1R4S%E8%B8%A9%E5%9D%91/dnspod.png"></p><ol start="2"><li>进入 OpenWrt 管理面板，选择 [服务] &gt; [动态DNS]，输入刚才添加的密钥即可。</li></ol><p><img src="/static/posts/20210305_%E8%BD%AF%E8%B7%AF%E7%94%B1R4S%E8%B8%A9%E5%9D%91/ddns.png"></p><ol start="3"><li>保存重启，看看 dnspod 那边的解析有没有修改。</li></ol><h3 id="其他服务配置"><a href="#其他服务配置" class="headerlink" title="其他服务配置"></a>其他服务配置</h3><p>这个第三方固件里还包含了其他很多插件，可自行启用：</p><ul><li>代理服务：各种代理协议、OpenClash</li><li>容器服务：Docker</li><li>VPN服务：PPTP、IPSec、OpenVPN、ZeroTier 等</li><li>内网穿透：frps、nps</li><li>网络服务：迅雷快鸟、UU加速器、Aria2 等</li><li>网络共享：WebDav、SMB、SFTP 等</li></ul><h2 id="无线接入点"><a href="#无线接入点" class="headerlink" title="无线接入点"></a>无线接入点</h2><p>R4S 是不带无线接入的，所以我们还需要一个 AP，刚好我家以前的硬路由 R7000 派上了用场，我把路由模式改成了 AP 模式，这样硬路由的压力会小很多，而且和主路由在同一个网段，端口映射会方便一些。</p><h2 id="弱电改造"><a href="#弱电改造" class="headerlink" title="弱电改造"></a>弱电改造</h2><p>家里之前铺设的都是五类线，装修后全部改成六类线，推荐家里用大号带电源的弱电箱，可以放一些服务设备，很实用。预计家里装修今年8月份完工，届时会再分享一波。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;NanoPi R4S 是友善电子团队推出的一款 Arm 架构的软路由，这是 R2S 的升级版。之前用家里废弃的主机刷过 OpenWrt，但是主机同时需要常年开启，体积大没办法塞进弱电箱，还有功耗、噪音也成问题。这段时间家里准备装修，所以正好借此重新设计一下家里的弱电和网络结构，这款小巧的软路由正好符合我的需求。&lt;/p&gt;</summary>
    
    
    
    <category term="网络建设" scheme="https://vincent0700.com/categories/%E7%BD%91%E7%BB%9C%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="软路由" scheme="https://vincent0700.com/tags/%E8%BD%AF%E8%B7%AF%E7%94%B1/"/>
    
    <category term="OpenWrt" scheme="https://vincent0700.com/tags/OpenWrt/"/>
    
  </entry>
  
</feed>
